= AssetHat

Your assets are covered.

With Rails' default asset caching, CSS and JS are concatenated (not even
minified) at runtime when that bundle is first requested. Not good enough.
AssetHat can automatically:

* Easily *minify* and *bundle* CSS and JS on deploy to reduce file sizes and
  HTTP requests.
* Load popular <strong>third-party JS</strong> (like jQuery and Prototype)
  from {<strong>Google's CDN</strong>}[http://code.google.com/apis/ajaxlibs/]
  when in production, or from localhost in development.
* Force image URLs in your CSS to use <strong>CDN subdomains</strong>
  (including SSL support), not just the current host.
* Add an image's last Git[http://git-scm.com/] commit ID to its CSS URLs to
  <strong>bust browser caches</strong> (e.g.,
  <code>/images/foo.png?ab12cd3</code>).

After setup, you can use these in your layouts and views:

    <%= include_css :bundle => 'application' %>
      # => <link href="/stylesheets/bundles/application.min.css"
      #          media="screen,projection" rel="stylesheet" type="text/css" />

    <%= include_js :bundles => ['plugins', 'common'] %>
      # => <script src="/javascripts/bundles/plugins.min.js"
      #            type="text/javascript"></script>
      #    <script src="/javascripts/bundles/common.min.js"
      #            type="text/javascript"></script>

And this in your deploy script:

    rake asset_hat:minify

Tested with Rails 2.3.x.



== Installation

1.  Configure the gem:

    * If you're using Rails 3 and/or
      {Bundler 0.9+}[http://github.com/carlhuda/bundler]:

      1.  Add to your app's Gemfile: <code>gem 'asset_hat', '0.x.x'</code>
      2.  Command-line: <code>bundle install</code>

    * If you're using Rails 2.x's <code>config.gem</code>:

      1.  Add to your app's <code>config/environment.rb</code>:
          <code>config.gem 'asset_hat', :version => '0.x.x'</code>
      2.  Command-line: <code>gem install asset_hat</code>

2.  Add to your app's Rakefile: <code>require 'asset_hat/tasks'</code>



== Configuration

1.  Create the default config file:

        rake asset_hat:config

2.  In your app, open the new file at <code>config/assets.yml</code>, and set
    up your CSS/JS bundles according to that file's example.

3.  Minify your bundles:

        rake asset_hat:minify

    This minifies all of the CSS/JS files listed in
    <code>config/assets.yml</code>, concatenates the minified code into bundle
    files, and adds CDN asset hosts and cache-busting commit IDs to image URLs
    in your CSS.

    Bundles are created as new files in
    <code>public/stylesheets/bundles/</code> and
    <code>public/javascripts/bundles/</code>. Your original CSS/JS files
    remain untouched.

4.  Set your deployment script to run <code>rake asset_hat:minify</code> after
    deploying your latest CSS/JS. This overwrites previously minified bundles,
    and leaves your original CSS/JS files untouched.

=== Advanced configuration

If you manage deployments with Capistrano[http://www.capify.org/], see the
gem's packaged example at <code>lib/asset_hat/capistrano.rb</code>.

If you want shorter output during deployments, you can use
<code>rake asset_hat:minify VERBOSE=false</code> in your deploy script.

Additional settings are supported in <code>config/assets.yml</code>:

* <code>engine</code>: Indicates how CSS and JS are minified; omit this
  setting to use the defaults. By default, CSS is minified with
  rgrove/cssmin[http://github.com/rgrove/cssmin] (a Ruby port of Lecomte's
  YUI Compressor and Schlueter's PHP cssmin), and JS is minified with
  rgrove/jsmin[http://github.com/rgrove/jsmin] (a Ruby port of Crockford's
  JSMin).

  If you'd prefer to have slightly more readable code for debugging purposes,
  you can switch both the CSS and JS engines to <code>weak</code>. However,
  the <code>weak</code> engines don't save as many bytes.

* <code>vendors</code>: Configures third-party JS that's loaded from a CDN or
  other external source. The following example configures jQuery and jQuery UI
  for use throughout the app:

        js:
          vendors:
            jquery:
              version:        1.4.3
            jquery_ui:
              version:        1.8.5
              remote_url:     http://cdn.example.com/js/jquery-ui-1.8.5.min.js
              remote_ssl_url: https://cdn-ssl.example.com/js/jquery-ui-1.8.5.min.js

  Configuration keys per vendor:

  * <code>version</code>: Sets the default version across the app. In the
    example above, <code><%= include_js :jquery %></code> uses version 1.4.2
    by default. You can override this for special layouts/views with
    <code><%= include_js :jquery, :version => '1.3.2' %></code>.
  * <code>remote_url</code>, <code>remote_ssl_url</code>: By default, vendor
    JS will load from {Google's CDN}[http://code.google.com/apis/ajaxlibs/]
    in production (or any environment where
    <code>config.action_controller.consider_all_requests_local</code> is set
    to <code>true</code>). If the original request to your app used SSL, the
    vendor JS will also load from Google's CDN via SSL. If you prefer to use a
    different CDN, specify its SSL/non-SSL URLs, and the appropriate URL will
    be used per request.

  A full list of supported vendors is in the AssetHat::JS::Vendors module.

=== SSL configuration

When you request a page via SSL, some browsers (euphemism for "IE 6") show
errors if any assets -- stylesheets, JS files, images -- are served _without_
SSL.

AssetHat plays well with SSL pages that load assets from a CDN. Put this in
<code>config/environments/production.rb</code> or similar:

    config.action_controller.asset_host = Proc.new do |source, request|
      "#{request.protocol}cdn#{source.hash % 4}.example.com"
        # => 'http://cdn0.example.com', 'https://cdn1.example.com', etc.
    end

This switches to a different CDN URL if the request used SSL. When you run
<code>rake asset_hat:minify</code> at deploy time, AssetHat detects this
configuration, and generates special SSL versions of each stylesheet that also
load images from CDN via SSL. (Non-SSL pages still get non-SSL stylesheets.)



== Usage

In your layouts and views, <strong>instead of these</strong>:

    <%= stylesheet_link_tag 'reset', 'application', 'clearfix',
                            :media => 'screen,projection',
                            :cache => 'bundles/application' %>
    <%= javascript_include_tag 'plugin-1', 'plugin-2', 'plugin-3',
                               :cache => 'bundles/application' %>

<strong>Use these:</strong>

    <%= include_css :bundle => 'application' %>
    <%= include_js  :bundle => 'application' %>

These turn into:

    <link href="/stylesheets/bundles/application.min.css"
      media="screen,projection" rel="stylesheet" type="text/css" />
    <script src="/javascripts/bundles/application.min.js"
      type="text/javascript"></script>

Have an enormous app? You can integrate gradually, using AssetHat alongside
Rails' default asset caching.

If your environment has <code>config.action_controller.perform_caching</code>
set to <code>true</code> (e.g., in production), the layout/view will include
minified bundle files. Otherwise, the separate, unminified files will be
included, based on the bundle contents you define in
<code>config/assets.yml</code>.

If your environment has <code>config.action_controller.asset_host</code>
pointing to a CDN, your CSS/JS files will load from there. If your
configuration supports using the CDN via SSL (see the section "SSL
configuration"), SSL requests will also load CSS/JS files via SSL.

=== Advanced usage

You can also include single files as expected:

    <%= include_css 'reset', 'application' %>
    <%= include_js  'plugin.min', 'application' %>

Or include multiple bundles at once:

    <%= include_js :bundles => %w[plugins common] %>

When including multiple bundles at once, this yields one
<code><link></code> or <code><script></code> element per bundle.

You may want to use multiple bundles to separate plugins (rarely changed) from
application code (frequently changed). If all code is in one huge bundle, then
whenever there's a change, browsers have to re-download the whole bundle. By
using multiple bundles based on update frequency, browsers cache the rarely
updated code, and only re-download the frequently updated code.



== {What is best in AssetHat?}[http://www.youtube.com/watch?v=V30tyaXv6EI]

* To crush your assets;
* See them bundled before you; and
* Hear no more lamentation about slow page loads.
